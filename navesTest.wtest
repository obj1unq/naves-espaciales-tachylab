import naves.*

describe "Nave de carga" {

	const naveVacia = new NaveDeCarga()
	const naveLlena = new NaveDeCarga(carga = 500000, velocidad = 290000)

	test "sobrecargada" {
		assert.that(naveLlena.sobrecargada())
	}

	test "no sobrecargada" {
		assert.notThat(naveVacia.sobrecargada())
	}

	test "excedida de velocidad" {
		assert.that(naveLlena.excedidaDeVelocidad())
	}

	test "no excedida de velocidad" {
		assert.notThat(naveVacia.excedidaDeVelocidad())
	}

	test "recibir amenaza" {
		naveLlena.recibirAmenaza()
		assert.equals(0, naveVacia.carga())
	}

}

describe "Nave de pasajeros" {

	const naveSinPasajeros = new NaveDePasajeros()
	const naveConPasajeros = new NaveDePasajeros(cantidadDePasajeros = 296, velocidad = 290000)

	test "velocidad maxima sin pasajeros" {
		assert.equals(75000, naveSinPasajeros.velocidadMaximaLegal())
	}

	test "velocidad maxima con pasajeros" {
		assert.equals(1000 - 200, naveConPasajeros.velocidadMaximaLegal())
	}

	test "esta en peligro" {
		assert.that(naveConPasajeros.estaEnPeligro())
	}

	test "no esta en peligro" {
		assert.notThat(naveSinPasajeros.estaEnPeligro())
	}

	test "recibir amenaza" {
		naveSinPasajeros.recibirAmenaza()
		assert.that(naveSinPasajeros.alarma())
	}

}

describe "Nave de combate" {

	const naveEnReposo = new NaveDeCombate()
	const naveEnAtaque = new NaveDeCombate(modo = ataque)

	test "no esta invisible en reposo" {
		assert.notThat(naveEnReposo.estaInvisible())
	}

	test "esta invisible en ataque" {
		assert.that(naveEnAtaque.estaInvisible())
	}

	test "no esta invisible en ataque" {
		naveEnAtaque.velocidad(20000)
		assert.notThat(naveEnAtaque.estaInvisible())
	}

	test "recibir amenaza en reposo" {
		naveEnReposo.recibirAmenaza()
		assert.equals("¡RETIRADA!", naveEnReposo.ultimoMensaje())
	}

	test "recibir amenaza en ataque" {
		naveEnAtaque.recibirAmenaza()
		assert.equals("Enemigo encontrado", naveEnAtaque.ultimoMensaje())
	}
}

describe "Naves propulsadas" {
	const naveDeCarga = new NaveDeCarga(velocidad = 0)
	const naveDePasajeros = new NaveDePasajeros(velocidad = 290000)

	test "Testeo de la Propulsion - Nave de Carga con velocidad 0" {
		naveDeCarga.propulsar()
		assert.equals(20000, naveDeCarga.velocidad())
	}

	test "Testeo de la Propulsion - Nave de Pasajeros con velocidad 290.000" {
		naveDePasajeros.propulsar()
		assert.equals(300000, naveDePasajeros.velocidad())
	}
}

describe "Nave de carga de residuos radioactivos" {
	const naveDeResiduos = new NaveDeCargaResiduosRadioactivos(velocidad = 10000, carga = 5000)

	test "Test de Nave de carga de residuos radioactivos - Recibir amenaza" {
		naveDeResiduos.recibirAmenaza()
		assert.equals(5000, naveDeResiduos.carga())
		assert.equals(0, naveDeResiduos.velocidad())
	}
}

describe "Prepararse para viajar" {
	const naveDePasajeros = new NaveDePasajeros(velocidad = 290000)
	const naveDeResiduos = new NaveDeCargaResiduosRadioactivos(velocidad = 0, sellado = false)
	const naveDeCombateAtaque = new NaveDeCombate(velocidad = 0, modo = ataque)
	const naveDeCombateReposo = new NaveDeCombate(velocidad = 0, modo = reposo)

	test "Prepararse para viajar - Nave de Pasajeros" {
		naveDePasajeros.prepararseParaViajar()
		assert.equals(300000, naveDePasajeros.velocidad())
	}

	test "Prepararse para viajar - Nave de Carga de Residuos" {
		naveDeResiduos.prepararseParaViajar()
		assert.equals(15000, naveDeResiduos.velocidad())
		assert.equals(true, naveDeResiduos.sellado())
	}

	test "Prepararse para viajar - Nave de Combate en Ataque" {
		naveDeCombateAtaque.prepararseParaViajar()
		assert.equals(15000, naveDeCombateAtaque.velocidad())
		assert.equals("Volviendo a la base", naveDeCombateAtaque.ultimoMensaje())
	}

	test "Prepararse para viajar - Nave de Combate en Reposo" {
		naveDeCombateReposo.prepararseParaViajar()
		assert.equals(15000, naveDeCombateReposo.velocidad())
		assert.equals("Saliendo en misión", naveDeCombateReposo.ultimoMensaje())
		assert.equals(ataque, naveDeCombateReposo.modo())
	}
}